services:
  #################
  ## Application ##
  #################
  geolocation-postgres:
    image: 'postgis/postgis:latest'
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: scala
      POSTGRES_PASSWORD: scala
      POSTGRES_DB: geolocation
    networks:
      - geolocation-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]

  geolocation:
    image: 'geolocation:latest'
    ports:
      - '8080:8080'
    environment:
      DB_HOST: geolocation-postgres
      DB_PORT: 5432
      DB_USERNAME: scala
      DB_PASSWORD: scala
      DB_DATABASE: geolocation
      ## For logging to stdout instead of to a collector
      #OTEL_TRACES_EXPORTER: logging
      #OTEL_METRICS_EXPORTER: logging
      #OTEL_LOGS_EXPORTER: logging
      OTEL_SERVICE_NAME: geolocation
      OTEL_METRIC_EXPORT_INTERVAL: 15000
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel-collector:4317"
    depends_on:
      geolocation-postgres:
        condition: service_healthy
        restart: true
    logging:
      driver: loki
      options:
        loki-url: "http://localhost:3100/loki/api/v1/push"
    networks:
      - geolocation-network

  ###################
  ## Observability ##
  ###################
  otel-collector: # receives application metrics and traces via gRPC or HTTP protocol
    image: otel/opentelemetry-collector-contrib
    command: [--config=/etc/otel-collector-config.yaml]
    volumes:
      - "./config/otel-collector-config.yaml:/etc/otel-collector-config.yaml"
    ports:
      - "8888:8888" # Prometheus metrics exposed by the collector
      - "8889:8889" # Prometheus exporter metrics
      - "4317:4317" # OTLP gRPC receiver
      - "4318:4318" # OTLP http receiver
    networks:
      - geolocation-network

  jaeger: # stores traces received from the OpenTelemetry Collector 
    image: jaegertracing/all-in-one:latest
    volumes:
      - "./config/jaeger-ui.json:/etc/jaeger/jaeger-ui.json"
    command: --query.ui-config /etc/jaeger/jaeger-ui.json
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - METRICS_STORAGE_TYPE=prometheus
      - PROMETHEUS_SERVER_URL=http://prometheus:9090
    ports:
      - "14250:14250"
      - "16685:16685" # GRPC
      - "16686:16686" # UI
    networks:
      - geolocation-network

  prometheus: # scrapes metrics from the OpenTelemetry Collector
    image: prom/prometheus:latest
    volumes:
      - "./config/prometheus.yml:/etc/prometheus/prometheus.yml"
    ports:
      - "9090:9090"
    networks:
      - geolocation-network

  promtail:
    image: grafana/promtail:2.9.10
    volumes:
      - /var/log:/var/log
    command: -config.file=/etc/promtail/config.yml
    networks:
      - geolocation-network

  loki:
    image: grafana/loki:2.9.10
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - geolocation-network

  grafana: # queries Jaeger and Prometheus to visualize traces and metrics
    image: grafana/grafana:latest
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 1
        datasources:
        - name: Loki
          type: loki
          access: proxy
          orgId: 1
          url: http://loki:3100
          basicAuth: false
          isDefault: true
          version: 1
          editable: true
        - name: Jaeger
          type: jaeger
          url: http://jaeger:16686
          access: proxy
          # UID should match the datasourceUid in derivedFields.
          #uid: my_jaeger_uid
        - name: Geolocation Postgres
          type: postgres
          url: geolocation-postgres:5432
          user: scala
          secureJsonData:
            password: 'scala'
          jsonData:
            database: geolocation
            sslmode: 'disable' # disable/require/verify-ca/verify-full
            maxOpenConns: 100 # Grafana v5.4+
            maxIdleConns: 100 # Grafana v5.4+
            maxIdleConnsAuto: true # Grafana v9.5.1+
            connMaxLifetime: 14400 # Grafana v5.4+
            postgresVersion: 903 # 903=9.3, 904=9.4, 905=9.5, 906=9.6, 1000=10
            timescaledb: false
        EOF
        /run.sh
    networks:
      - geolocation-network

networks:
  geolocation-network:
    driver: bridge
